<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Power</title>
  
  <subtitle>自尊，自律，自强，自爱。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/powerofandroid.com/"/>
  <updated>2019-10-18T09:18:47.020Z</updated>
  <id>/powerofandroid.com/</id>
  
  <author>
    <name>Power</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android架构组件（一）：Lifecycle</title>
    <link href="/powerofandroid.com/2019/10/18/Android%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ALifecycle/"/>
    <id>/powerofandroid.com/2019/10/18/Android架构组件（一）：Lifecycle/</id>
    <published>2019-10-17T16:00:00.000Z</published>
    <updated>2019-10-18T09:18:47.020Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>谷歌在17年发布了Android架构组件1.0稳定版，用来帮助开发者们简化开发流程，并为App的开发架构提供指南。这次发布的架构包含了声明周期管理，数据持久性等提供了一系列库，并且该架构相互之间完美的融合到了一起，有助于我们使用更少的样板代码写出模块化的App。<br>他们包含：</p><ol><li><strong>Lifecycle</strong>（生命周期管理）</li><li><strong>LiviData</strong>（基于观察者模式的可感知生命周期的数据持有类）</li><li><strong>Viewmodel</strong>（将view和model分开的组件）</li><li><strong>Room</strong>（简单强大的数据存储组件）</li></ol><p>接下来我会用一系列文章和大家一起了解和使用这些组件。<br>系列文章也会收录到<a href="https://powerofandroid.com/" target="_blank" rel="noopener">我的博客（Power）</a>里，方便大家查阅。</p><a id="more"></a><p>好了，首先我们先来学习下基础组件：<strong>Lifecycle</strong></p><h4 id="什么是Lifecycle？"><a href="#什么是Lifecycle？" class="headerlink" title="什么是Lifecycle？"></a>什么是Lifecycle？</h4><p>在讲解之前，我们先来分析下没用该组件之前我们常用的MVP模式中，Presenter是如何绑定activity/Fragment的生命周期？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//presenter</span></span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">Presenter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachView</span><span class="params">(T view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detachView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//activity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Presenter presenter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">        presenter= <span class="keyword">new</span> Presenter();</span><br><span class="line">        presenter.attachView(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        presenter.detachView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相信大多数开发者对上述代码很清楚了，我们常把activity和prsenter的绑定和分离都写在了base基类里用于同步两者的生命周期。上述的代码并没有什么逻辑错误，不过接下来的Lifecycle会让生命周期管理变得更加丝滑~<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * presenter继承LifecycleObserver</span></span><br><span class="line"><span class="comment"> * 1.通过注解的方式实现Lifecycle的观察者方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">LifecycleObserver</span></span>&#123;</span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_ANY)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onAny</span><span class="params">(LifecycleOwner owner, Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_CREATE)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_DESTROY)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在activity里添加Observer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Presenter presenter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">        presenter= <span class="keyword">new</span> Presenter();</span><br><span class="line">        <span class="comment">//2.添加LifecycleObserver实现同步</span></span><br><span class="line">        getLifecycle().addObserver(presenter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过上述代码我们了解到，presenter通过继承LifecycleObserver实现生命周期方法，并在activity/Fragment中addObserver()中传入presenter对象就可以绑定两者的生命周期了。而且Lifecycle提供了所有的生命周期事件，选择你所需要的生命周期并通过注解进行声明就可以了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_ANY)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onAny</span><span class="params">(LifecycleOwner owner, Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_CREATE)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_DESTROY)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_START)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_STOP)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_RESUME)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_PAUSE)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么，Lifecycle的工作原理是什么？我们继续分析。</p><h4 id="Lifecycle的工作原理"><a href="#Lifecycle的工作原理" class="headerlink" title="Lifecycle的工作原理"></a>Lifecycle的工作原理</h4><p>我们先祭出一张整体架构图：<br><img src="https://power-blog-resources.oss-cn-beijing.aliyuncs.com/pic/lifecycle%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="lifecycle原理图"></p><p>我们来看下大致的工作原理：</p><ul><li><p><strong>Lifecycle（生命周期）</strong>：该抽象类提供了addOberserver，removeObser，getCurrentState抽象方法，生命周期的事件和状态的枚举类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> State <span class="title">getCurrentState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Event &#123;</span><br><span class="line">        ON_CREATE,</span><br><span class="line">        ON_START,</span><br><span class="line">        ON_RESUME,</span><br><span class="line">        ON_PAUSE,</span><br><span class="line">        ON_STOP,</span><br><span class="line">        ON_DESTROY,</span><br><span class="line">        ON_ANY</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">        DESTROYED,</span><br><span class="line">        INITIALIZED,</span><br><span class="line">        CREATED,</span><br><span class="line">        STARTED,</span><br><span class="line">        RESUMED;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAtLeast</span><span class="params">(@NonNull State state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> compareTo(state) &gt;= <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>LifecycleObserver接口（Lifecycle观察者）</strong>：实现该接口的类，通过注解的方式，可以通过被LifecycleOwner类的addObserver(LifecycleObserver o)方法注册,被注册后，LifecycleObserver便可以观察到LifecycleOwner的生命周期事件。</p></li><li><p><strong>LifecycleOwner接口（Lifecycle持有者）</strong>：实现该接口的类持有生命周期(Lifecycle对象)，该接口的生命周期(Lifecycle对象)的改变会被其注册的观察者LifecycleObserver观察到并触发其对应的事件。<br>该接口提供了getLifecycle()方法返回Lifecycle对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"WeakerAccess"</span>, <span class="string">"unused"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleOwner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function">Lifecycle <span class="title">getLifecycle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>activity继承的AppCompatActivity父类v4包里的FragmentActivity已经实现了该接口，<br>v4包里的fragment同理也替我们实现了LifecycleObserver接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AppCompatActivity继承自FragmentActivity继承自SupportActivity，该类里的getLifecycle()方法返回了lifecycle对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentActivity</span> <span class="keyword">extends</span> <span class="title">SupportActivity</span> <span class="keyword">implements</span> <span class="title">ViewModelStoreOwner</span>, <span class="title">OnRequestPermissionsResultCallback</span>, <span class="title">RequestPermissionsRequestCodeValidator</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getLifecycle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupportActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LifecycleOwner</span>, <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> LifecycleRegistry mLifecycleRegistry = <span class="keyword">new</span> LifecycleRegistry(<span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fragment同理，就不贴代码了，大家可以去源码里查看。</span></span><br></pre></td></tr></table></figure></p><p>从上述的代码我们不难发现，<strong>实现的getLifecycle()方法，实际上返回的是 LifecycleRegistry对象，LifecycleRegistry对象实际上继承了Lifecycle</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleRegistry</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么持有Lifecycle对象有什么作用呢？实际上Fragment已经给出了答案。在fragment的生命周期方法中LifecycleRegistry都会发送对应的生命周期事件给内部的handleLifecycleEvent()方法；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">xxx</span>, <span class="title">LifecycleOwner</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">performCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        onCreate(savedInstanceState);  <span class="comment">//1.先执行生命周期方法</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//2.生命周期事件分发</span></span><br><span class="line">                                   mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">performStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        onStart();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">performResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         onResume();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">performPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.注意，调用顺序变了</span></span><br><span class="line">        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        onPause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">performStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        onStop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">performDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>fragment把事件发送出去后，都做了什么事情？接下来我们来看下LifecycleRegistry内部的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleRegistry</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLifecycleEvent</span><span class="params">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        State next = getStateAfter(event);</span><br><span class="line">        moveToState(next);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToState</span><span class="params">(State next)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        sync();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//通过里边的backwardPass()和forwardPass()方法循环遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">forwardPass</span><span class="params">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">while</span> (...) &#123;</span><br><span class="line">            ...</span><br><span class="line">            ObserverWithState observer = entry.getValue();</span><br><span class="line">            <span class="keyword">while</span> (...) &#123;</span><br><span class="line">                <span class="comment">//通知状态变化</span></span><br><span class="line">                pushParentState(observer.mState);</span><br><span class="line">                observer.dispatchEvent(lifecycleOwner,    upEvent(observer.mState));</span><br><span class="line">                popParentState();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过代码我们了解到<strong>handleLifecycleEvent</strong>里通过getStateAfter()方法获取当前的状态，并且通过<strong>moveToState()</strong> 方法修改Lifecycle的状态值，紧接着遍历所有LifecycleObserver 并同步且通知其状态发生变化，因此就能触发已经实现LifecycleObserver接口的类中对应的生命周期事件。</p><p>现在是时候祭出  <strong>Lifecycle时序图</strong>  来更好的理解工作原理<br><img src="https://power-blog-resources.oss-cn-beijing.aliyuncs.com/pic/lifecycle%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="Lifecycle时序图"></p><p><strong><em>以上就是Lifecycle的基本工作原理，为缩短文章篇幅和可读性，文章里涉及的代码是源码的精简版，如若原理不详细，请移步源码阅读。</em></strong><br><img src="https://power-blog-resources.oss-cn-beijing.aliyuncs.com/pic/lifecycle%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95.png" alt="lifecycle目录结构"></p><h4 id="参考-amp-感谢"><a href="#参考-amp-感谢" class="headerlink" title="参考&amp;感谢"></a>参考&amp;感谢</h4><p><a href="https://juejin.im/post/5c53beaf51882562e27e5ad9#heading-1" target="_blank" rel="noopener">Android官方架构组件Lifecycle:生命周期组件详解&amp;原理分析</a></p><p><a href="https://www.wanandroid.com/" target="_blank" rel="noopener">玩Android</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我们通过文章已经基本了解了lifecycle的工作原理，并且利用lifecycle可以更好对一些事件进行生命周期的管理。其实lifecycle原生支持livedata（顾名思义，动态数据容器），所以我们下一篇的重点就是学习和分析livedata的用法和构造。<br>这几年在开发过程中一直使用MVP架构，并且项目结构变大以后非常多的接口类出现了，导致项目中很臃肿。也在不少博客中看到MMVM的架构的应用，但是对于许多架构了解不深刻，导致代码阅读很吃力，才有了系统学习Android架构的想法，并且计划学习完Android架构系列以后，试着搭建自己的MVVM框架，并逐渐延伸到组件化开发，从而做到真正的学以致用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;谷歌在17年发布了Android架构组件1.0稳定版，用来帮助开发者们简化开发流程，并为App的开发架构提供指南。这次发布的架构包含了声明周期管理，数据持久性等提供了一系列库，并且该架构相互之间完美的融合到了一起，有助于我们使用更少的样板代码写出模块化的App。&lt;br&gt;他们包含：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Lifecycle&lt;/strong&gt;（生命周期管理）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LiviData&lt;/strong&gt;（基于观察者模式的可感知生命周期的数据持有类）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Viewmodel&lt;/strong&gt;（将view和model分开的组件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Room&lt;/strong&gt;（简单强大的数据存储组件）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来我会用一系列文章和大家一起了解和使用这些组件。&lt;br&gt;系列文章也会收录到&lt;a href=&quot;https://powerofandroid.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客（Power）&lt;/a&gt;里，方便大家查阅。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="/powerofandroid.com/categories/Android/"/>
    
    
      <category term="android架构组件" scheme="/powerofandroid.com/tags/android%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习（二）：控制语句详解篇</title>
    <link href="/powerofandroid.com/2019/08/14/Kotlin%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E8%AF%A6%E8%A7%A3%E7%AF%87/"/>
    <id>/powerofandroid.com/2019/08/14/Kotlin学习（二）：控制语句详解篇/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2019-08-14T09:22:16.376Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>通过上一篇的学习，我们对kotlin已经掌握了函数的定义，基本数据类型，null安全设计，类型检测及自动转换和Kotlin的区间表达式，如果您还有任何不明白的地方，请跳转至我的上一篇博客：<br><a href="https://www.jianshu.com/p/090535b596c1" target="_blank" rel="noopener">《Kotlin学习（一）：我TM谢谢你！(基础语法篇)》</a><br>对于kotlin，这只是最基础的入门讲解，也希望大家能够跟我一样逐渐适应kotlin的美，我们一起进步，我相信通过一段时间的学习，我也可以像大家分享一些kotlin的语法糖以及更深入的使用。<a href="https://powerofandroid.com/" target="_blank" rel="noopener">我的博客（Power）</a></p><h4 id="kotlin控制语句详解"><a href="#kotlin控制语句详解" class="headerlink" title="kotlin控制语句详解"></a>kotlin控制语句详解</h4><ul><li>条件控制语句：if 语句、when 语句</li><li>循环控制语句：for 循环、while与do…while 循环</li><li>返回和跳转语句：return、 break、 continue</li></ul><a id="more"></a><h4 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1. if语句"></a>1. if语句</h4><p>kotlin的if表达式其实和java是非常类似的，唯一不同的地方在于kotlin可以把表达式的结果赋值给变量，类似于java的三元运算符，我们可以直接实现。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统用法</span></span><br><span class="line"><span class="keyword">var</span> max = a </span><br><span class="line"><span class="keyword">if</span> (a &lt; b) max = b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 else </span></span><br><span class="line"><span class="keyword">var</span> max: <span class="built_in">Int</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    max = a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    max = b</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 作为表达式</span></span><br><span class="line"><span class="keyword">val</span> max = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure></p><p>举例：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        println(<span class="string">"x 大于 0"</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">        println(<span class="string">"x 等于 0"</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        println(<span class="string">"x 小于 0"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line">    <span class="keyword">val</span> c = <span class="keyword">if</span> (a&gt;=b) a <span class="keyword">else</span> b</span><br><span class="line">    println(<span class="string">"c 的值为 <span class="variable">$c</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为：</span></span><br><span class="line">x 等于 <span class="number">0</span></span><br><span class="line">c 的值为 <span class="number">2</span></span><br></pre></td></tr></table></figure></p><h4 id="2-when表达式"><a href="#2-when表达式" class="headerlink" title="2. when表达式"></a>2. when表达式</h4><p>when 将它的参数和所有的分支条件顺序比较，直到某个分支满足条件。<br>when 既可以被当做表达式使用也可以被当做语句使用。如果它被当做表达式，符合条件的分支的值就是整个表达式的值，如果当做语句使用， 则忽略个别分支的值。<br>我们看下例子：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 when 中，else 同 switch 的 default。如果其他分支都不满足条件将会求值 else 分支</span></span><br><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="number">1</span> -&gt; print(<span class="string">"x == 1"</span>)</span><br><span class="line">    <span class="number">2</span> -&gt; print(<span class="string">"x == 2"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; &#123; <span class="comment">// 注意这个块,else 相当于 switch 的 default</span></span><br><span class="line">        print(<span class="string">"x 不是 1 ，也不是 2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果很多分支需要用相同的方式处理，则可以把多个分支条件放在一起，用逗号分隔</span></span><br><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span> -&gt; print(<span class="string">"x == 0 or x == 1"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"otherwise"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们也可以检测一个值在（in）或者不在（!in）一个区间或者集合中</span></span><br><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> -&gt; print(<span class="string">"x is in the range"</span>)</span><br><span class="line">    <span class="keyword">in</span> validNumbers -&gt; print(<span class="string">"x is valid"</span>)</span><br><span class="line">    !<span class="keyword">in</span> <span class="number">10</span>..<span class="number">20</span> -&gt; print(<span class="string">"x is outside the range"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"none of the above"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种可能性是检测一个值是（is）或者不是（!is）一个特定类型的值。注意： 由于智能转换，你可以访问该类型的方法和属性而无需 任何额外的检测</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">hasPrefix</span><span class="params">(x: <span class="type">Any</span>)</span></span> = <span class="keyword">when</span>(x) &#123;</span><br><span class="line">    <span class="keyword">is</span> String -&gt; x.startsWith(<span class="string">"prefix"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//when 也可以用来取代 if-else if链。 如果不提供参数，所有的分支条件都是简单的布尔表达式，而当一个分支的条件为真时则执行该分支</span></span><br><span class="line"><span class="keyword">when</span> &#123;</span><br><span class="line">    x.isOdd() -&gt; print(<span class="string">"x is odd"</span>)</span><br><span class="line">    x.isEven() -&gt; print(<span class="string">"x is even"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"x is funny"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//when 中使用 in 运算符来判断集合内是否包含某实例</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> items = setOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</span><br><span class="line">    <span class="keyword">when</span> &#123;</span><br><span class="line">        <span class="string">"orange"</span> <span class="keyword">in</span> items -&gt; println(<span class="string">"juicy"</span>)</span><br><span class="line">        <span class="string">"apple"</span> <span class="keyword">in</span> items -&gt; println(<span class="string">"apple is fine too"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>举例：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span> -&gt; println(<span class="string">"x == 0 or x == 1"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"otherwise"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        <span class="number">1</span> -&gt; println(<span class="string">"x == 1"</span>)</span><br><span class="line">        <span class="number">2</span> -&gt; println(<span class="string">"x == 2"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123; <span class="comment">// 注意这个块</span></span><br><span class="line">            println(<span class="string">"x 不是 1 ，也不是 2"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> -&gt; println(<span class="string">"x 在该区间范围内"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"x 不在该区间范围内"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">x == <span class="number">0</span> or x == <span class="number">1</span></span><br><span class="line">x 不是 <span class="number">1</span> ，也不是 <span class="number">2</span></span><br><span class="line">x 在该区间范围内</span><br></pre></td></tr></table></figure></p><h4 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3. for循环"></a>3. for循环</h4><ul><li>for 循环可以对任何提供迭代器（iterator）的对象进行遍历</li><li>kotlin 废除了 java 的 <code>for(int i = 0; i &lt; list.size(); i++)</code>规则，新增了其他的规则，来满足对数组或集合的遍历</li><li>循环数组会编译成优化的实现而不会创建额外对象，或者你可以用库函数 withIndex：<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for循环可以对任何提供迭代器（iterator）的对象进行遍历</span></span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> collection) print(item)</span><br><span class="line"><span class="keyword">for</span> (item: <span class="built_in">Int</span> <span class="keyword">in</span> ints) &#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果你想要通过索引遍历一个数组或者一个 list</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> array.indices) &#123;</span><br><span class="line">    print(array[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环数组会编译成优化的实现而不会创建额外对象，或者你可以用库函数 withIndex：</span></span><br><span class="line"><span class="keyword">for</span> ((index, value) <span class="keyword">in</span> array.withIndex()) &#123;</span><br><span class="line">    println(<span class="string">"the element at <span class="variable">$index</span> is <span class="variable">$value</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>举例：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环5次，且步长为1的递增</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">5</span>)&#123;</span><br><span class="line">  print(<span class="string">"i =&gt; <span class="variable">$i</span> \t"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环5次，且步长为1的递减</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">15</span> downTo <span class="number">11</span>)&#123;</span><br><span class="line">    print(<span class="string">"i =&gt; <span class="variable">$i</span> \t"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">"使用 符号`..`的打印结果\n"</span>)</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">20</span> .. <span class="number">25</span>)&#123;</span><br><span class="line">    print(<span class="string">"i =&gt; <span class="variable">$i</span> \t"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">"使用until的打印结果\n"</span>)</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">20</span> until <span class="number">25</span>)&#123;</span><br><span class="line">    print(<span class="string">"i =&gt; <span class="variable">$i</span> \t"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">使用 符号`..`的打印结果</span><br><span class="line">i =&gt; <span class="number">20</span>  i =&gt; <span class="number">21</span>  i =&gt; <span class="number">22</span>  i =&gt; <span class="number">23</span>  i =&gt; <span class="number">24</span>  i =&gt; <span class="number">25</span>     </span><br><span class="line">使用until的打印结果</span><br><span class="line">i =&gt; <span class="number">20</span>  i =&gt; <span class="number">21</span>  i =&gt; <span class="number">22</span>  i =&gt; <span class="number">23</span>  i =&gt; <span class="number">24</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数组的indices属性遍历</span></span><br><span class="line"><span class="keyword">var</span> arrayListTwo = arrayOf(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> arrayListTwo.indices)&#123;</span><br><span class="line">    println(<span class="string">"arrayListTwo[<span class="variable">$i</span>] =&gt; "</span> + arrayListTwo[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">arrayListTwo[<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">arrayListTwo[<span class="number">1</span>] =&gt; <span class="number">3</span></span><br><span class="line">arrayListTwo[<span class="number">2</span>] =&gt; <span class="number">5</span></span><br><span class="line">arrayListTwo[<span class="number">3</span>] =&gt; <span class="number">7</span></span><br><span class="line">arrayListTwo[<span class="number">4</span>] =&gt; <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数组的withIndex()方法遍历</span></span><br><span class="line"><span class="keyword">var</span> arrayListTwo = arrayOf(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line"><span class="keyword">for</span> ((index,value) <span class="keyword">in</span> arrayListTwo.withIndex())&#123;</span><br><span class="line">    println(<span class="string">"index =&gt; <span class="variable">$index</span> \t value =&gt; <span class="variable">$value</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">index =&gt; <span class="number">0</span>   value =&gt; <span class="number">1</span></span><br><span class="line">index =&gt; <span class="number">1</span>   value =&gt; <span class="number">3</span></span><br><span class="line">index =&gt; <span class="number">2</span>   value =&gt; <span class="number">5</span></span><br><span class="line">index =&gt; <span class="number">3</span>   value =&gt; <span class="number">7</span></span><br><span class="line">index =&gt; <span class="number">4</span>   value =&gt; <span class="number">9</span></span><br></pre></td></tr></table></figure></p><h4 id="4-while，-do…while语句"><a href="#4-while，-do…while语句" class="headerlink" title="4. while， do…while语句"></a>4. while， do…while语句</h4><p>kotlin的while语句和java的while语句一样，下面我们直接举栗：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    println(<span class="string">"num =&gt; <span class="variable">$num</span>"</span>)</span><br><span class="line">    println(<span class="string">"循环了<span class="variable">$count</span> 次"</span>)</span><br><span class="line">    count++</span><br><span class="line">    num++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">num =&gt; <span class="number">5</span></span><br><span class="line">循环了<span class="number">1</span> 次</span><br><span class="line">num =&gt; <span class="number">6</span></span><br><span class="line">循环了<span class="number">2</span> 次</span><br><span class="line">num =&gt; <span class="number">7</span></span><br><span class="line">循环了<span class="number">3</span> 次</span><br><span class="line">num =&gt; <span class="number">8</span></span><br><span class="line">循环了<span class="number">4</span> 次</span><br><span class="line">num =&gt; <span class="number">9</span></span><br><span class="line">循环了<span class="number">5</span> 次</span><br><span class="line"></span><br><span class="line"><span class="comment">//do...while语句</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    println(<span class="string">"num =&gt; <span class="variable">$num</span>"</span>)</span><br><span class="line">    println(<span class="string">"循环了<span class="variable">$count</span> 次"</span>)</span><br><span class="line">    count++</span><br><span class="line">    num++</span><br><span class="line">&#125;<span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">num =&gt; <span class="number">5</span></span><br><span class="line">循环了<span class="number">1</span> 次</span><br><span class="line">num =&gt; <span class="number">6</span></span><br><span class="line">循环了<span class="number">2</span> 次</span><br><span class="line">num =&gt; <span class="number">7</span></span><br><span class="line">循环了<span class="number">3</span> 次</span><br><span class="line">num =&gt; <span class="number">8</span></span><br><span class="line">循环了<span class="number">4</span> 次</span><br><span class="line">num =&gt; <span class="number">9</span></span><br><span class="line">循环了<span class="number">5</span> 次</span><br><span class="line"></span><br><span class="line"><span class="comment">// *注* : do&#123;...&#125;while(exp)与while(exp)&#123;...&#125;最大的区别是do&#123;...&#125;while(exp)最少执行一次，这点也是和Java相同的</span></span><br></pre></td></tr></table></figure></p><h4 id="5-返回和跳转语句"><a href="#5-返回和跳转语句" class="headerlink" title="5. 返回和跳转语句"></a>5. 返回和跳转语句</h4><p>return、break、continue的用法和java是一样的，</p><ul><li>eturn。默认从最直接包围它的函数或者匿名函数返回</li><li>break。终止最直接包围它的循环</li><li><p>continue。继续下一次最直接包围它的循环<br>我们直接看代码吧：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">3</span>) <span class="keyword">continue</span>  <span class="comment">// i 为 3 时跳过当前循环，继续下一次循环</span></span><br><span class="line">        println(i)</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">5</span>) <span class="keyword">break</span>   <span class="comment">// i 为 6 时 跳出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为：1 2 4 5 6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">returnExample</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str: String = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> (str.isBlank())&#123;</span><br><span class="line">        println(<span class="string">"我退出了该方法"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为：我退出了该方法</span></span><br></pre></td></tr></table></figure></li><li><p>Break 和 Continue 标签<br>在 Kotlin 中任何表达式都可以用标签（label）来标记。 标签的格式为标识符后跟 @ 符号，例如：abc@、fooBar@都是有效的标签。 要为一个表达式加标签，我们只要在其前加标签即可</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">loop@</span> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1</span>..<span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (……) <span class="keyword">break</span><span class="symbol">@loop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;通过上一篇的学习，我们对kotlin已经掌握了函数的定义，基本数据类型，null安全设计，类型检测及自动转换和Kotlin的区间表达式，如果您还有任何不明白的地方，请跳转至我的上一篇博客：&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/090535b596c1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Kotlin学习（一）：我TM谢谢你！(基础语法篇)》&lt;/a&gt;&lt;br&gt;对于kotlin，这只是最基础的入门讲解，也希望大家能够跟我一样逐渐适应kotlin的美，我们一起进步，我相信通过一段时间的学习，我也可以像大家分享一些kotlin的语法糖以及更深入的使用。&lt;a href=&quot;https://powerofandroid.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客（Power）&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;kotlin控制语句详解&quot;&gt;&lt;a href=&quot;#kotlin控制语句详解&quot; class=&quot;headerlink&quot; title=&quot;kotlin控制语句详解&quot;&gt;&lt;/a&gt;kotlin控制语句详解&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;条件控制语句：if 语句、when 语句&lt;/li&gt;
&lt;li&gt;循环控制语句：for 循环、while与do…while 循环&lt;/li&gt;
&lt;li&gt;返回和跳转语句：return、 break、 continue&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="/powerofandroid.com/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="/powerofandroid.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习（一）：我TM谢谢你！(基础语法篇)</title>
    <link href="/powerofandroid.com/2019/07/30/Kotlin%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%88%91TM%E8%B0%A2%E8%B0%A2%E4%BD%A0%EF%BC%81(%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%AF%87)/"/>
    <id>/powerofandroid.com/2019/07/30/Kotlin学习（一）：我TM谢谢你！(基础语法篇)/</id>
    <published>2019-07-29T16:00:00.000Z</published>
    <updated>2019-07-30T03:12:49.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自从2017年Google定义Kotlin为Android开发的官方语言，瞬间掀起了学习大潮，各种学习博客如雨后春笋般攻击我这颗弱小而又无助的小心脏！是你们，是的，就是因为你们使我变得越来越强大，我TM替我日益稀疏的头发谢谢各位学霸！！！所以，搞起来吧！开启我们从乌黑亮丽到寸草不生的kotlin学习之旅！<br><a href="https://powerofandroid.com/" target="_blank" rel="noopener">我的博客（Power）</a></p><a id="more"></a><p><img src="https://power-blog-resources.oss-cn-beijing.aliyuncs.com/gif/%E7%BB%99%E5%AD%A6%E9%9C%B8%E8%B7%AA%E4%BA%86.gif" alt=""><br>作为Android开发水军中的一员，其实很早就简单看了语法，其中的优缺点这里就不再过多陈述，不清楚或想详细了解的请自行<a href="https://www.baidu.com/" target="_blank" rel="noopener">社会你度十三娘</a>，鉴于大家如果能有幸看见这边文章，想必对我们吃饭的家伙熟悉程度应该不亚于我了，所以对于Android studio的环境配置这里小弟就不再卖弄风骚了，毕竟在座的各位都是学霸，VIP中P…<br>这里在开头也为大家分享一些大牛关于学习Kotlin的链接，有助于大家在吃百家饭的时候，不容易养成挑食的小毛病。<br><img src="https://power-blog-resources.oss-cn-beijing.aliyuncs.com/pic/%E8%90%BD%E9%AD%84%E7%9A%84Android%E5%BC%80%E5%8F%91.jpeg" alt=""><br>本系列均踩在各位巨人的肩膀上总结而成！请各位看官轻喷…<br><a href="https://www.kotlincn.net/" target="_blank" rel="noopener">Kotlin语言中国</a><br><a href="https://www.runoob.com/kotlin/kotlin-tutorial.html" target="_blank" rel="noopener">Kotlin-菜鸟教程</a><br><a href="https://www.jianshu.com/p/f98dcd2da323" target="_blank" rel="noopener">Kotlin入门到进阶</a><br><a href="https://www.wanandroid.com/article/query?k=kotlin" target="_blank" rel="noopener">玩Android-kotlin文章</a></p><h3 id="Kotlin基础语法"><a href="#Kotlin基础语法" class="headerlink" title="Kotlin基础语法"></a>Kotlin基础语法</h3><ol><li><p>函数的定义<br> 函数使用关键字 fun，参数格式为：参数 : 类型</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  sum:函数名 a,b参数名，Int参数类型</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;<span class="comment">// :后边Int为返回值类型</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这里需要注意如果是public则必须声明返回值类型，如果是无返回值的函数（:Unit）则可以省略。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">unitFun</span><span class="params">()</span></span> : <span class="built_in">Unit</span>&#123;</span><br><span class="line">    println(<span class="string">"我是返回值为Unit的函数，Unit可省略"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// return Unit 可省略</span></span><br><span class="line">    <span class="comment">// 或者 return  可省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">unitFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    println(<span class="string">"我是返回值为Unit的函数，Unit可省略"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可变长参数函数，用 vararg 关键字进行标识</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">vars</span><span class="params">(<span class="keyword">vararg</span> v:<span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(vt <span class="keyword">in</span> v)&#123;</span><br><span class="line">        print(vt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    vars(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)  <span class="comment">// 输出12345</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>常量与变量<br> 变量：var &lt;标识符&gt; : &lt;类型&gt; = &lt;初始化值&gt;</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x: <span class="built_in">Int</span> = <span class="number">5</span>        <span class="comment">// 系统自动推断变量类型为Int</span></span><br><span class="line">x += <span class="number">1</span>                <span class="comment">// 变量可修改</span></span><br></pre></td></tr></table></figure><p> 常量：val &lt;标识符&gt; : &lt;类型&gt; = &lt;初始化值&gt;</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">val</span> b = <span class="number">1</span>       <span class="comment">// 系统自动推断变量类型为Int</span></span><br><span class="line"><span class="keyword">val</span> c: <span class="built_in">Int</span>      <span class="comment">// 如果不在声明时初始化则必须提供变量类型</span></span><br><span class="line">c = <span class="number">1</span>           <span class="comment">// 明确赋值</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Kotlin基本数据类型"><a href="#Kotlin基本数据类型" class="headerlink" title="Kotlin基本数据类型"></a>Kotlin基本数据类型</h3><p>基础数据类型包含有：</p><ul><li>数值类型</li><li>字符类型</li><li>字符串类型</li><li>布尔类型</li><li>数组类型</li></ul><ol><li>数值类型（Numbers）<br> Kotlin 的基本数值类型包括 Byte、Short、Int、Long、Float、Double 等<br> 不同于 Java 的是，字符不属于数值类型，是一个独立的数据类型。</li></ol><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">位宽度</th></tr></thead><tbody><tr><td style="text-align:center">Byte</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">Short</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">Int</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">Long</td><td style="text-align:center">64</td></tr><tr><td style="text-align:center">Float</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">64</td></tr></tbody></table><ol start="2"><li><p>字符类型（Characters）<br> 和 Java 不一样，Kotlin 中的 Char 不能直接和数字操作，Char 必需是单引号 ‘ 包含起来的。比如普通字符 ‘0’，’a’</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> ch :<span class="built_in">Char</span> = <span class="number">1</span>; <span class="comment">// 错误示范</span></span><br><span class="line"><span class="keyword">val</span> ch :<span class="built_in">Char</span> = <span class="string">'1'</span>; <span class="comment">// 正确示范</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符类型转换成数字</span></span><br><span class="line"><span class="keyword">val</span> ch :<span class="built_in">Char</span> = <span class="string">'8'</span>;</span><br><span class="line"><span class="keyword">val</span> a :<span class="built_in">Int</span> = ch.toInt()</span><br></pre></td></tr></table></figure></li><li><p>字符串类型（Strings）<br> 和 Java 一样，String 是不可变的。</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.方括号 [] 语法可以很方便的获取字符串中的某个字符，也可以通过 for 循环来遍历：</span></span><br><span class="line"><span class="keyword">for</span> (c <span class="keyword">in</span> str) &#123;</span><br><span class="line">    println(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.支持三个引号 """ 扩起来的字符串，支持多行字符串，比如：</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> text = <span class="string">"""</span></span><br><span class="line"><span class="string">    多行字符串</span></span><br><span class="line"><span class="string">    多行字符串</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    println(text)   <span class="comment">// 输出有一些前置空格</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.String 可以通过 trimMargin() 方法来删除多余的空白:</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> text = <span class="string">"""</span></span><br><span class="line"><span class="string">    |多行字符串</span></span><br><span class="line"><span class="string">    |菜鸟教程</span></span><br><span class="line"><span class="string">    |多行字符串</span></span><br><span class="line"><span class="string">    |Runoob</span></span><br><span class="line"><span class="string">    """</span>.trimMargin()</span><br><span class="line">    println(text)    <span class="comment">// 前置空格删除了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 字符串模板：即在字符串内通过一些小段代码求值并把结果合并到字符串中。模板表达式以美元符（$）开头</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> i = <span class="number">10</span></span><br><span class="line">    <span class="keyword">val</span> s = <span class="string">"i = <span class="variable">$i</span>"</span> </span><br><span class="line">    println(s) <span class="comment">// 求值结果为 "i = 10"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用花括号扩起来的任意表达式:</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> s = <span class="string">"runoob"</span></span><br><span class="line">    <span class="keyword">val</span> str = <span class="string">"<span class="variable">$s</span>.length is <span class="subst">$&#123;s.length&#125;</span>"</span> </span><br><span class="line">    println(str) <span class="comment">// 求值结果为 "runoob.length is 6"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>布尔类型（Boolean）<br> 布尔用 Boolean 类型表示，它有两个值：true 和 false。<br> 内置的布尔运算有：</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|| – 短路逻辑或</span><br><span class="line">&amp;&amp; – 短路逻辑与</span><br><span class="line">! - 逻辑非</span><br></pre></td></tr></table></figure></li><li><p>数组类型（Arrays）<br> 数组用类 Array 实现，并且还有一个 size 属性及 get 和 set 方法，由于使用 [] 重载了 get 和 set 方法，所以我们可以通过下标很方便的获取或者设置数组对应位置的值。<br>数组的创建两种方式：一种是使用函数arrayOf()；另外一种是使用工厂函数。</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">//[1,2,3]</span></span><br><span class="line">    <span class="keyword">val</span> a = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="comment">//[0,2,4]</span></span><br><span class="line">    <span class="keyword">val</span> b = Array(<span class="number">3</span>, &#123; i -&gt; (i * <span class="number">2</span>) &#125;)</span><br><span class="line">    <span class="comment">//读取数组内容</span></span><br><span class="line">    println(a[<span class="number">0</span>])    <span class="comment">// 输出结果：1</span></span><br><span class="line">    println(b[<span class="number">1</span>])    <span class="comment">// 输出结果：2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 注意: 与 Java 不同的是，Kotlin 中数组是不型变的（invariant）<br> 除了类Array，还有ByteArray, ShortArray, IntArray等等，用来表示各个类型的数组，省去了装箱操作，因此效率更高，其用法同Array一样：</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> x: IntArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x[<span class="number">0</span>] = x[<span class="number">1</span>] + x[<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li></ol><h3 id="Kotlin的Null安全设计"><a href="#Kotlin的Null安全设计" class="headerlink" title="Kotlin的Null安全设计"></a>Kotlin的Null安全设计</h3><ol><li><p>声明可为null参数及null判断处理<br> 类型后面加 ？ 即表示可为null<br> 进行判null处理时有两种方式：<br> 第一种就是字段后加 !!    表示像java一样抛出null异常<br> 第二种就是字段后加 ?     表示不作处理，可以返回null<br> 第三种就是字段后加 ?:    表示字段为null时返回的值<br> 当然， if/else也是可以的，在使用if判null后，可自动转换为非null变量</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型后面加?表示可为空</span></span><br><span class="line"><span class="keyword">var</span> age: String? = <span class="string">"23"</span> </span><br><span class="line"><span class="comment">//抛出空指针异常</span></span><br><span class="line"><span class="keyword">val</span> ages = age!!.toInt()</span><br><span class="line"><span class="comment">//不做处理返回 null</span></span><br><span class="line"><span class="keyword">val</span> ages1 = age?.toInt()</span><br><span class="line"><span class="comment">//age为空返回-1</span></span><br><span class="line"><span class="keyword">val</span> ages2 = age?.toInt() ?: -<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>函数中使用可null类型<br> 当一个函数/方法有返回值时，如果方法中的代码使用?.去返回一个值，那么方法的返回值的类型后面也要加上 ? 符号</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funNullMethod</span><span class="params">()</span></span> : <span class="built_in">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">val</span> str : String? = <span class="string">"123456"</span></span><br><span class="line">    <span class="keyword">return</span> str?.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：6</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Kotlin的类型检测及自动类型转换"><a href="#Kotlin的类型检测及自动类型转换" class="headerlink" title="Kotlin的类型检测及自动类型转换"></a>Kotlin的类型检测及自动类型转换</h3><ul><li><p>我们可以使用 is 运算符检测一个表达式是否某类型的一个实例(类似于Java中的instanceof关键字)</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</span><br><span class="line">    <span class="comment">// 做过类型判断以后，obj会被系统自动转换为String类型</span></span><br><span class="line">    <span class="keyword">return</span> obj.length </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在这里还有一种方法，与Java中instanceof不同，使用!is</span></span><br><span class="line">  <span class="comment">// if (obj !is String)&#123;</span></span><br><span class="line">  <span class="comment">//   // XXX</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里的obj仍然是Any类型的引用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj !<span class="keyword">is</span> String)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="comment">// 在这个分支中, `obj` 的类型会被自动转换为 `String`</span></span><br><span class="line">  <span class="keyword">return</span> obj.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//甚至还可以</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">  <span class="comment">// 在 `&amp;&amp;` 运算符的右侧, `obj` 的类型会被自动转换为 `String`</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">is</span> String &amp;&amp; obj.length &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> obj.length</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Kotlin的区间表达式"><a href="#Kotlin的区间表达式" class="headerlink" title="Kotlin的区间表达式"></a>Kotlin的区间表达式</h3><ul><li>区间表达式由具有操作符形式 .. 的 rangeTo 函数辅以 in 和 !in 形成。</li><li><p>区间是为任何可比较类型定义的，但对于整型原生类型，它有一个优化的实现。以下是使用区间的一些示例:</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">4</span>) print(i) <span class="comment">// 输出“1234”</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">4</span>..<span class="number">1</span>) print(i) <span class="comment">// 什么都不输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123; <span class="comment">// 等同于 1 &lt;= i &amp;&amp; i &lt;= 10</span></span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 step 指定步长</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">4</span> step <span class="number">2</span>) print(i) <span class="comment">// 输出“13”</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">4</span> downTo <span class="number">1</span> step <span class="number">2</span>) print(i) <span class="comment">// 输出“42”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 until 函数排除结束元素</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">10</span>) &#123;   <span class="comment">// i in [1, 10) 排除了 10</span></span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实测示例</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    print(<span class="string">"循环输出："</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">4</span>) print(i) <span class="comment">// 输出“1234”</span></span><br><span class="line">    println(<span class="string">"\n----------------"</span>)</span><br><span class="line">    print(<span class="string">"设置步长："</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">4</span> step <span class="number">2</span>) print(i) <span class="comment">// 输出“13”</span></span><br><span class="line">    println(<span class="string">"\n----------------"</span>)</span><br><span class="line">    print(<span class="string">"使用 downTo："</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">4</span> downTo <span class="number">1</span> step <span class="number">2</span>) print(i) <span class="comment">// 输出“42”</span></span><br><span class="line">    println(<span class="string">"\n----------------"</span>)</span><br><span class="line">    print(<span class="string">"使用 until："</span>)</span><br><span class="line">    <span class="comment">// 使用 until 函数排除结束元素</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">4</span>) &#123;   <span class="comment">// i in [1, 4) 排除了 4</span></span><br><span class="line">    print(i)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"\n----------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    循环输出：1234</span></span><br><span class="line"><span class="comment">    ----------------</span></span><br><span class="line"><span class="comment">    设置步长：13</span></span><br><span class="line"><span class="comment">    ----------------</span></span><br><span class="line"><span class="comment">    使用 downTo：42</span></span><br><span class="line"><span class="comment">    ----------------</span></span><br><span class="line"><span class="comment">    使用 until：123</span></span><br><span class="line"><span class="comment">    ----------------</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;自从2017年Google定义Kotlin为Android开发的官方语言，瞬间掀起了学习大潮，各种学习博客如雨后春笋般攻击我这颗弱小而又无助的小心脏！是你们，是的，就是因为你们使我变得越来越强大，我TM替我日益稀疏的头发谢谢各位学霸！！！所以，搞起来吧！开启我们从乌黑亮丽到寸草不生的kotlin学习之旅！&lt;br&gt;&lt;a href=&quot;https://powerofandroid.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客（Power）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="/powerofandroid.com/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="/powerofandroid.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Android三种动画详解</title>
    <link href="/powerofandroid.com/2019/01/08/Android%E4%B8%89%E7%A7%8D%E5%8A%A8%E7%94%BB%E8%AF%A6%E8%A7%A3/"/>
    <id>/powerofandroid.com/2019/01/08/Android三种动画详解/</id>
    <published>2019-01-07T16:00:00.000Z</published>
    <updated>2019-01-11T01:24:03.888Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自尊，自律，自强，自爱。–Power</p><p>一直以来自己对Android的动画一知半解，所以决定写这篇文章来详细系统的学习Android的三种动画，即 </p><ul><li>View Animation（视图动画）</li><li>Drawable Animation（帧动画）</li><li>Property Animation（属性动画）</li></ul><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h3 id="1-View-Animation（视图动画）"><a href="#1-View-Animation（视图动画）" class="headerlink" title="1.View Animation（视图动画）"></a>1.View Animation（视图动画）</h3><p>1.1 View动画的概述及种类<br>视图动画的作用对象是View，支持四种动画效果，分别是平移动画，缩放动画，旋转动画，透明度动画。譬如，我们可以对TextView设置其文本的移动，旋转，缩放，透明。</p><p>视图动画可以通过XML或通过代码动态创建，对于视图动画建议使用XML文件定义，因为它具有更高的可读性，可重用性。</p><p>下面我们来分别看一下View动画的四种效果：</p><ul><li><p>平移动画（TranslateAnimation）<br>  <img src="http://power-blog-resources.oss-cn-beijing.aliyuncs.com/gif/translate_anim.gif" width="160" div="" align="center"></p></li><li><p>缩放动画（ScaleAnimation）<br>  <img src="http://power-blog-resources.oss-cn-beijing.aliyuncs.com/gif/scale_anim.gif" width="160" div="" align="center"></p></li><li><p>旋转动画（RotateAnimation）<br>  <img src="http://power-blog-resources.oss-cn-beijing.aliyuncs.com/gif/rotate_anim.gif" width="160" div="" align="center"></p></li><li><p>透明度动画（AlphaAnimation）<br>  <img src="https://power-blog-resources.oss-cn-beijing.aliyuncs.com/gif/alhpa_anim.gif" width="160" div="" align="center"></p></li></ul><p>view动画的四种变换我们通过效果图已基本了解，下面我们通过表格系统的了解一下：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">标签</th><th style="text-align:center">子类</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">平移动画</td><td style="text-align:center">&lt; translate &gt;</td><td style="text-align:center">TranslateAnimation</td><td style="text-align:center">移动View</td></tr><tr><td style="text-align:center">缩放动画</td><td style="text-align:center">&lt; scale &gt;</td><td style="text-align:center">ScaleAnimation</td><td style="text-align:center">方法或缩小View</td></tr><tr><td style="text-align:center">旋转动画</td><td style="text-align:center">&lt; rotate &gt;</td><td style="text-align:center">RotateAnimation</td><td style="text-align:center">旋转view</td></tr><tr><td style="text-align:center">透明度动画</td><td style="text-align:center">&lt; alpha &gt;</td><td style="text-align:center">AlphaAnimation</td><td style="text-align:center">改变View的透明度</td></tr></tbody></table><p>要使用View动画，首先要创建XML文件，我们需要在res下新建anim文件夹，接着在anim下创建animation resource file的xml文件，我们举例为view_anim.xml</p><p>我们通过xml文件来了解它们各自的语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--平移动画标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">"0%p"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXDelta</span>=<span class="string">"20%p"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">"0%p"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">"20%p"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"4000"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--缩放动画标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scale</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXScale</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXScale</span>=<span class="string">"0.2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYScale</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYScale</span>=<span class="string">"0.2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"4000"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--旋转动画标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rotate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">"360"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"4000"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--透明度动画标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromAlpha</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toAlpha</span>=<span class="string">"0.2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"4000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面的代码我们知道，View动画既可以是单个动画，也可以有一系列动画组成。<br>这是因为View动画的四种种类分别对应着Animation的四个子类（TranslateAnimation，ScaleAnimation，RotateAnimation，AlphaAnimation），除了以上四个子类它还有一个AnimationSet类，对应xml标签为<code>&lt;set&gt;</code>，它是一个容器，可以包含若干个动画，并且内部也可以继续嵌套<code>&lt;set&gt;</code>集合的。<br>我们在activity对TextView设置动画：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> power</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-08-08 20:28:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: MainActivity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        textView = findViewById(R.id.textview);</span><br><span class="line">        textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Animation animation = AnimationUtils.loadAnimation(MainActivity.<span class="keyword">this</span>,R.anim.viewanimation);</span><br><span class="line">                textView.startAnimation(animation);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看下动画集合的运行效果：<br><img src="http://power-blog-resources.oss-cn-beijing.aliyuncs.com/gif/set_anim.gif" width="160" div="" align="center"></p><p>1.2 View动画的属性详解</p><ul><li>Animation属性详解：</li></ul><table><thead><tr><th style="text-align:center">xml属性</th><th style="text-align:center">java方法</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">android:duration</td><td style="text-align:center">setDuration(long)</td><td style="text-align:center">动画持续时间，毫秒为单位</td></tr><tr><td style="text-align:center">android:ShareInterpolator</td><td style="text-align:center">setInterpolator(Interpolator)</td><td style="text-align:center">设定插值器（指定的动画效果，譬如回弹等）</td></tr><tr><td style="text-align:center">android:fillAfter</td><td style="text-align:center">setFillAfter(boolean)</td><td style="text-align:center">控件动画结束时是否保持动画最后的状态</td></tr><tr><td style="text-align:center">android:fillBefore</td><td style="text-align:center">setFillBefore(boolean)</td><td style="text-align:center">控件动画结束时是否还原到开始动画前的状态</td></tr><tr><td style="text-align:center">android:repeatMode</td><td style="text-align:center">setRepeatMode(int)</td><td style="text-align:center">重复类型有两个值，reverse表示倒序回放，restart表示从头播放</td></tr><tr><td style="text-align:center">android:startOffset</td><td style="text-align:center">setStartOffset(long)<span class="Apple-tab-span" style="white-space:pre"></span></td><td style="text-align:center">调用start函数之后等待开始运行的时间，单位为毫秒</td></tr></tbody></table><ul><li>TranslateAnimation属性详解：</li></ul><table><thead><tr><th style="text-align:center">xml属性</th><th style="text-align:center">java方法</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">android:fromXDelta</td><td style="text-align:center">TranslateAnimation(float fromXDelta, …)</td><td style="text-align:center">起始点X轴坐标，数值，百分比，百分比p，<em>注①</em></td></tr><tr><td style="text-align:center">android:fromYDelta</td><td style="text-align:center">TranslateAnimation(…, float fromYDelta, …)</td><td style="text-align:center">起始点Y轴从标，同上规律</td></tr><tr><td style="text-align:center">android:toXDelta</td><td style="text-align:center">TranslateAnimation(…, float toXDelta, …)</td><td style="text-align:center">结束点X轴坐标，同上规律</td></tr><tr><td style="text-align:center">android:toYDelta</td><td style="text-align:center">TranslateAnimation(…, float toYDelta)</td><td style="text-align:center">结束点Y轴坐标，同上规律</td></tr></tbody></table><blockquote><p><strong>注①：</strong> 数值、百分数、百分数p，譬如50表示以当前View左上角坐标加50px为初始点、50%表示以当前View的左上角加上当前View宽高的50%做为初始点、50%p表示以当前View的左上角加上父控件宽高的50%做为初始点</p></blockquote><ul><li>ScaleAnimation属性详解：</li></ul><table><thead><tr><th style="text-align:center">xml属性</th><th style="text-align:center">java方法</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">android:fromXScale</td><td style="text-align:center">ScaleAnimation(float fromX, …)</td><td style="text-align:center">初始X轴缩放比例，1.0表示无变化</td></tr><tr><td style="text-align:center">android:toXScale</td><td style="text-align:center">ScaleAnimation(…, float toX, …)</td><td style="text-align:center">结束X轴缩放比例</td></tr><tr><td style="text-align:center">android:fromYScale</td><td style="text-align:center">ScaleAnimation(…, float fromY, …)</td><td style="text-align:center">初始Y轴缩放比例</td></tr><tr><td style="text-align:center">android:toYScale</td><td style="text-align:center">ScaleAnimation(…, float toY, …)</td><td style="text-align:center">结束Y轴缩放比例</td></tr><tr><td style="text-align:center">android:pivotX</td><td style="text-align:center">ScaleAnimation(…, float pivotX, …)</td><td style="text-align:center">缩放起点X轴坐标，数值，百分比，百分比p，<em>注①</em></td></tr><tr><td style="text-align:center">android:pivotY</td><td style="text-align:center">ScaleAnimation(…, float pivotY)</td><td style="text-align:center">缩放起点Y轴坐标，同上规律</td></tr></tbody></table><ul><li>RotateAnimation属性详解：</li></ul><table><thead><tr><th style="text-align:center">xml属性</th><th style="text-align:center">Java方法</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">android:fromDegrees</td><td style="text-align:center">RotateAnimation(float fromDegrees, …)</td><td style="text-align:center">旋转开始角度，正代表顺时针度数，负代表逆时针度数</td></tr><tr><td style="text-align:center">android:toDegrees</td><td style="text-align:center">RotateAnimation(…, float toDegrees, …)</td><td style="text-align:center">旋转结束角度，正代表顺时针度数，负代表逆时针度数</td></tr><tr><td style="text-align:center">android:pivotX</td><td style="text-align:center">RotateAnimation(…, float pivotX, …)</td><td style="text-align:center">缩放起点X坐标，数值，百分比，百分比p，<strong>注①</strong></td></tr><tr><td style="text-align:center">android:pivotY</td><td style="text-align:center">RotateAnimation(…, float pivotY)</td><td style="text-align:center">缩放起点Y坐标，同上规律</td></tr></tbody></table><ul><li>AlphaAnimation属性详解：</li></ul><table><thead><tr><th style="text-align:center">xml属性</th><th style="text-align:center">java方法</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">android:fromAlpha</td><td style="text-align:center">AlphaAnimation(float fromAlpha, …)</td><td style="text-align:center">动画开始的透明度（0.0到1.0，0.0是全透明，1.0是不透明）</td></tr><tr><td style="text-align:center">android:toAlpha</td><td style="text-align:center">AlphaAnimation(…, float toAlpha)</td><td style="text-align:center">动画结束的透明度，同上</td></tr></tbody></table><ul><li>AnimationSet属性详解：<br>  AnimationSet继承自Animation，是上面四种的组合容器管理类，没有自己特有的属性，他的属性继承自Animation，所以特别注意，<strong><em>当我们对set标签使用Animation的属性时会对该标签下的所有子控件都产生影响。</em></strong>譬如我们在set标签下加入duration=“1000”，子控件的duration属性会失效。</li></ul><p>1.3 View动画的使用方法及注意事项</p><ul><li>上述的使用方法已经非常详细了，也并没有什么难以理解的地方，我们只需要创建相应的xml文件，然后在activity里startAnimation就可以完成动画了。当然了，Animation类和View操作Animation还有一些如下的实用方法：</li></ul><table><thead><tr><th style="text-align:center">Animation类的方法</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">reset()</td><td style="text-align:center">重置Animation的初始化</td></tr><tr><td style="text-align:center">cancel()</td><td style="text-align:center">取消Animation动画</td></tr><tr><td style="text-align:center">start()</td><td style="text-align:center">开始Animation动画</td></tr><tr><td style="text-align:center">setAnimationListener()</td><td style="text-align:center">给当前Animation设置动画监听</td></tr><tr><td style="text-align:center">hasStarted()</td><td style="text-align:center">判断当前Animation是否开始</td></tr><tr><td style="text-align:center">hasEnded()</td><td style="text-align:center">判断当前Animation是否结束</td></tr><tr><td style="text-align:center">—————————-</td><td style="text-align:center">—————————-</td></tr><tr><td style="text-align:center"><strong>View类对Animation的操作方法</strong></td><td style="text-align:center"><strong>解释</strong></td></tr><tr><td style="text-align:center">startAnimation(Animation animation)<span class="Apple-tab-span" style="white-space:pre"></span></td><td style="text-align:center">对当前View开始设置的Animation动画</td></tr><tr><td style="text-align:center">clearAnimation()</td><td style="text-align:center">取消当View在执行的Animation动画</td></tr></tbody></table><ul><li>注意事项<ul><li><strong><em>特别特别注意：补间动画执行之后并未改变View的真实布局属性值。切记这一点，譬如我们在Activity中有一个 Button在屏幕上方，我们设置了平移动画移动到屏幕下方然后保持动画最后执行状态呆在屏幕下方，这时如果点击屏幕下方动画执行之后的Button是没 有任何反应的，而点击原来屏幕上方没有Button的地方却响应的是点击Button的事件。</em></strong></li><li><strong><em>在进行动画的时候，尽量使用dp，因为px会导致适配问题。</em></strong></li></ul></li></ul><p>1.4 View动画Interpolator插值器详解</p><ul><li>插值器简介<br>  首先，我们先看一下源码的解释：<br>  <img src="http://power-blog-resources.oss-cn-beijing.aliyuncs.com/pic/interpolator.jpg" alt="interpolato"><br>注释说明：插值器定义了动画的变化，使一些基础的动画如（平移，缩放，旋转，透明）可以被加速，减速，重复等<br>通过上图可以看见其实系统提供给我们的各类型插值器都是实现了Interpolator接口，具体如下：</li></ul><table><thead><tr><th style="text-align:center">java类</th><th style="text-align:center">xml</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">AccelerateDecelerateInterpolator</td><td style="text-align:center">@android:anim/accelerate_decelerate_interpolator</td><td style="text-align:center">动画始末速率较慢，中间加速</td></tr><tr><td style="text-align:center">AccelerateInterpolator</td><td style="text-align:center">@android:anim/accelerate_interpolator</td><td style="text-align:center">动画开始速率较慢，之后慢慢加速</td></tr><tr><td style="text-align:center">AnticipateInterpolator</td><td style="text-align:center">@android:anim/anticipate_interpolator</td><td style="text-align:center">开始的时候从后向前甩</td></tr><tr><td style="text-align:center">AnticipateOvershootInterpolator</td><td style="text-align:center">@android:anim/anticipate_overshoot_interpolator</td><td style="text-align:center">类似上面AnticipateInterpolator</td></tr><tr><td style="text-align:center">BounceInterpolator</td><td style="text-align:center">@android:anim/bounce_interpolator</td><td style="text-align:center">动画结束时弹起</td></tr><tr><td style="text-align:center">CycleInterpolator</td><td style="text-align:center">@android:anim/cycle_interpolator</td><td style="text-align:center">循环播放速率改变为正弦曲线</td></tr><tr><td style="text-align:center">DecelerateInterpolator</td><td style="text-align:center">@android:anim/decelerate_interpolator</td><td style="text-align:center">动画开始快然后慢</td></tr><tr><td style="text-align:center">LinearInterpolator</td><td style="text-align:center">@android:anim/linear_interpolator</td><td style="text-align:center">动画匀速改变</td></tr><tr><td style="text-align:center">OvershootInterpolator</td><td style="text-align:center">@android:anim/overshoot_interpolator</td><td style="text-align:center">向前弹出一定值之后回到原来位置</td></tr></tbody></table><ul><li><p>插值器的使用<br>  插值器的使用比较简答，如下：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line">&lt;!--运动结束时弹起--&gt;</span><br><span class="line">android:interpolator="@android:anim/bounce_interpolator"&gt;</span><br><span class="line"><span class="comment">&lt;!--平移动画标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromXDelta</span>=<span class="string">"0%p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toXDelta</span>=<span class="string">"20%p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromYDelta</span>=<span class="string">"0%p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toYDelta</span>=<span class="string">"20%p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"4000"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--缩放动画标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  我们看一下设置插值器后的效果：<br>  <img src="http://power-blog-resources.oss-cn-beijing.aliyuncs.com/gif/interpolator.gif" width="160" div="" align="center"></p></li><li><p>插值器的自定义<br>  当系统提供给我们的插值器不能满足开发需求时，就需要我们自定义，而插值器的自定义有两种方式，一种xml实现，一种java实现。</p><ul><li><p>xml实现方式<br>在anim文件下创建xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">accelerateInterpolator</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:factor</span>=<span class="string">"0.8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">accelerateInterpolator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过代码我们发现，这种方式只能修改现有插值器的一些属性，但有些插值器不具备修改属性，那么我们就通过java代码实现进一步需求</p></li><li><p>java代码实现方式<br>通过上面的学习我们知道，所有的插值器都是继承自Interpolator接口，它则继承TimeInterpolator接口，而这个接口定义了float getInterpolation(float input);方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccelerateDecelerateInterpolator</span> <span class="keyword">extends</span> <span class="title">BaseInterpolator</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NativeInterpolatorFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">float</span>)(Math.cos((input + <span class="number">1</span>) * Math.PI) / <span class="number">2.0f</span>) + <span class="number">0.5f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeInterpolator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Maps a value representing the elapsed fraction of an animation to a value that represents</span></span><br><span class="line"><span class="comment"> * the interpolated fraction. This interpolated value is then multiplied by the change in</span></span><br><span class="line"><span class="comment"> * value of an animation to derive the animated value at the current elapsed animation time.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> input A value between 0 and 1.0 indicating our current point</span></span><br><span class="line"><span class="comment"> *        in the animation where 0 represents the start and 1.0 represents</span></span><br><span class="line"><span class="comment"> *        the end</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The interpolation value. This value can be more than 1.0 for</span></span><br><span class="line"><span class="comment"> *         interpolators which overshoot their targets, or less than 0 for</span></span><br><span class="line"><span class="comment"> *         interpolators that undershoot their targets.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>我们需要继承Interpolator接口并实现getInterpolation();，在方法里处理业务逻辑即可。</p><h3 id="2-Drawable-Animation（帧动画）"><a href="#2-Drawable-Animation（帧动画）" class="headerlink" title="2.Drawable Animation（帧动画）"></a>2.Drawable Animation（帧动画）</h3><p>2.1帧动画概述<br>帧动画是顺序播放一组预先定义好的图片，不同于View动画，系统提供了另外一个类AnimationDrawable来使用帧动画。</p><p>2.2帧动画的使用<br>首先我们找一组帧动画的图片放入drawable-xhdpi文件夹下，其次在drawable文件夹下创建xml文件，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">animation-list</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:oneshot</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/refresh1"</span> <span class="attr">android:duration</span>=<span class="string">"180"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/refresh2"</span> <span class="attr">android:duration</span>=<span class="string">"180"</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/refresh25"</span> <span class="attr">android:duration</span>=<span class="string">"180"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">view = findViewById(R.id.view);</span><br><span class="line">        view.setBackgroundResource(R.drawable.drawable_anim);</span><br><span class="line">        view.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                AnimationDrawable animationDrawable = (AnimationDrawable) view.getBackground();</span><br><span class="line">                animationDrawable.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>通过上述代码，帧动画已经完成了，我们来看下效果图：<br><img src="http://power-blog-resources.oss-cn-beijing.aliyuncs.com/gif/drawable_anim.gif" width="160" div="" align="center"></p><p><code>&lt;animation-list&gt;</code> 必须是根节点，包含一个或者多个<code>&lt;item&gt;</code>元素，属性有：<br><code>android:oneshot true</code>代表只执行一次，false循环执行。<br><code>&lt;item&gt;</code> 类似一帧的动画资源。</p><p><code>&lt;item&gt;</code> animation-list的子项，包含属性如下：<br><code>android:drawable</code> 一个frame的Drawable资源。<br><code>android:duration</code> 一个frame显示多长时间。</p><p><strong><em>帧动画很简单，但容易引起OOM，我在这里也就不多赘述。</em></strong></p><h3 id="3-Property-Animation（属性动画）"><a href="#3-Property-Animation（属性动画）" class="headerlink" title="3.Property Animation（属性动画）"></a>3.Property Animation（属性动画）</h3><p>3.1 未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;自尊，自律，自强，自爱。–Power&lt;/p&gt;
&lt;p&gt;一直以来自己对Android的动画一知半解，所以决定写这篇文章来详细系统的学习Android的三种动画，即 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View Animation（视图动画）&lt;/li&gt;
&lt;li&gt;Drawable Animation（帧动画）&lt;/li&gt;
&lt;li&gt;Property Animation（属性动画）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="/powerofandroid.com/categories/Android/"/>
    
    
      <category term="动画(Animation)" scheme="/powerofandroid.com/tags/%E5%8A%A8%E7%94%BB-Animation/"/>
    
  </entry>
  
</feed>
